{"ast":null,"code":"import axios from 'axios';\nimport { validateApiResponse } from './apiValidation';\nconst BASE_URL = 'https://swapi.dev/api';\n\n// Create an Axios instance with predefined configurations\nconst axiosInstance = axios.create({\n  baseURL: BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n    // Add any other common headers here\n  }\n});\n\n// Cache for API responses\nconst responseCache = new Map();\nexport const fetchPlanets = async searchTerm => {\n  // Only proceed if searchTerm has at least 2 characters\n  if (searchTerm.length < 2) {\n    return [];\n  }\n  try {\n    // Check if the response is already in the cache\n    if (responseCache.has(searchTerm)) {\n      return responseCache.get(searchTerm);\n    }\n    const response = await axiosInstance.get(`/planets/?search=${searchTerm}`);\n\n    // Validate the API response structure before accessing properties\n    if (validateApiResponse(response)) {\n      const planets = response.data.results;\n\n      // Cache the response for future use\n      responseCache.set(searchTerm, planets);\n      return planets;\n    } else {\n      console.error('Invalid API response:', response);\n      throw new Error('Invalid API response');\n    }\n  } catch (error) {\n    console.error('Error fetching planets:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["axios","validateApiResponse","BASE_URL","axiosInstance","create","baseURL","headers","responseCache","Map","fetchPlanets","searchTerm","length","has","get","response","planets","data","results","set","console","error","Error"],"sources":["/Users/christophernotley/my-webpack-react-app/src/api/starWarsApi.js"],"sourcesContent":["import axios from 'axios';\nimport { validateApiResponse } from './apiValidation';\n\nconst BASE_URL = 'https://swapi.dev/api';\n\n// Create an Axios instance with predefined configurations\nconst axiosInstance = axios.create({\n    baseURL: BASE_URL,\n    headers: {\n        'Content-Type': 'application/json',\n        // Add any other common headers here\n    },\n});\n\n// Cache for API responses\nconst responseCache = new Map();\n\nexport const fetchPlanets = async (searchTerm) => {\n    // Only proceed if searchTerm has at least 2 characters\n    if (searchTerm.length < 2) {\n        return [];\n    }\n\n    try {\n        // Check if the response is already in the cache\n        if (responseCache.has(searchTerm)) {\n            return responseCache.get(searchTerm);\n        }\n\n        const response = await axiosInstance.get(`/planets/?search=${searchTerm}`);\n\n        // Validate the API response structure before accessing properties\n        if (validateApiResponse(response)) {\n            const planets = response.data.results;\n\n            // Cache the response for future use\n            responseCache.set(searchTerm, planets);\n\n            return planets;\n        } else {\n            console.error('Invalid API response:', response);\n            throw new Error('Invalid API response');\n        }\n    } catch (error) {\n        console.error('Error fetching planets:', error);\n        throw error;\n    }\n};\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,mBAAmB,QAAQ,iBAAiB;AAErD,MAAMC,QAAQ,GAAG,uBAAuB;;AAExC;AACA,MAAMC,aAAa,GAAGH,KAAK,CAACI,MAAM,CAAC;EAC/BC,OAAO,EAAEH,QAAQ;EACjBI,OAAO,EAAE;IACL,cAAc,EAAE;IAChB;EACJ;AACJ,CAAC,CAAC;;AAEF;AACA,MAAMC,aAAa,GAAG,IAAIC,GAAG,CAAC,CAAC;AAE/B,OAAO,MAAMC,YAAY,GAAG,MAAOC,UAAU,IAAK;EAC9C;EACA,IAAIA,UAAU,CAACC,MAAM,GAAG,CAAC,EAAE;IACvB,OAAO,EAAE;EACb;EAEA,IAAI;IACA;IACA,IAAIJ,aAAa,CAACK,GAAG,CAACF,UAAU,CAAC,EAAE;MAC/B,OAAOH,aAAa,CAACM,GAAG,CAACH,UAAU,CAAC;IACxC;IAEA,MAAMI,QAAQ,GAAG,MAAMX,aAAa,CAACU,GAAG,CAAE,oBAAmBH,UAAW,EAAC,CAAC;;IAE1E;IACA,IAAIT,mBAAmB,CAACa,QAAQ,CAAC,EAAE;MAC/B,MAAMC,OAAO,GAAGD,QAAQ,CAACE,IAAI,CAACC,OAAO;;MAErC;MACAV,aAAa,CAACW,GAAG,CAACR,UAAU,EAAEK,OAAO,CAAC;MAEtC,OAAOA,OAAO;IAClB,CAAC,MAAM;MACHI,OAAO,CAACC,KAAK,CAAC,uBAAuB,EAAEN,QAAQ,CAAC;MAChD,MAAM,IAAIO,KAAK,CAAC,sBAAsB,CAAC;IAC3C;EACJ,CAAC,CAAC,OAAOD,KAAK,EAAE;IACZD,OAAO,CAACC,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;IAC/C,MAAMA,KAAK;EACf;AACJ,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}