{"ast":null,"code":"var _jsxFileName = \"/Users/christophernotley/my-webpack-react-app/src/components/Autocomplete/Autocomplete.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useCallback } from 'react';\nimport usePlanetSearch from '../../hooks/usePlanetSearch';\nimport AutocompleteInput from './AutocompleteInput';\nimport SuggestionList from './SuggestionList';\nimport './Autocomplete.css';\nimport { debounce } from '../../utils/debounce';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Autocomplete = () => {\n  _s();\n  const [searchTerm, setSearchTerm] = useState('');\n  const [isFocused, setIsFocused] = useState(false);\n  const [selectedPlanet, setSelectedPlanet] = useState(null);\n  const inputRef = useRef(null);\n\n  // Create the debounced function using useCallback to ensure that it doesn't get recreated on every render\n  const debouncedSetSearchTerm = useCallback(debounce(newSearchTerm => {\n    setSearchTerm(newSearchTerm);\n  }, 500), []);\n\n  // Hook that uses the search term state to fetch data\n  const {\n    planets,\n    isLoading,\n    isError\n  } = usePlanetSearch(searchTerm);\n  if (planets && planets.length > 0) {\n    console.log('planets:', planets);\n  }\n  const handleInputChange = event => {\n    debouncedSetSearchTerm(event.target.value);\n    setSelectedPlanet(null);\n  };\n  const handleFocus = () => {\n    setIsFocused(true);\n  };\n  const handleBlur = () => {\n    setIsFocused(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `autocomplete-container ${isFocused ? 'focused' : ''}`,\n    children: [/*#__PURE__*/_jsxDEV(AutocompleteInput, {\n      searchTerm: searchTerm,\n      handleInputChange: handleInputChange,\n      handleFocus: handleFocus,\n      handleBlur: handleBlur,\n      inputRef: inputRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 5\n    }, this), isFocused && /*#__PURE__*/_jsxDEV(SuggestionList, {\n      isFocused: isFocused,\n      searchTerm: searchTerm,\n      planets: planets,\n      isLoading: isLoading,\n      isError: isError // Make sure this is passed\n      ,\n      handleSelectPlanet: setSelectedPlanet\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), selectedPlanet && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"selected-planet\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Selected Planet: \", selectedPlanet.name]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 3\n  }, this);\n};\n_s(Autocomplete, \"z/E8aX1qh/pcrrldGx8vQvsGJO0=\", false, function () {\n  return [usePlanetSearch];\n});\n_c = Autocomplete;\nexport default Autocomplete;\nvar _c;\n$RefreshReg$(_c, \"Autocomplete\");","map":{"version":3,"names":["React","useState","useRef","useCallback","usePlanetSearch","AutocompleteInput","SuggestionList","debounce","jsxDEV","_jsxDEV","Autocomplete","_s","searchTerm","setSearchTerm","isFocused","setIsFocused","selectedPlanet","setSelectedPlanet","inputRef","debouncedSetSearchTerm","newSearchTerm","planets","isLoading","isError","length","console","log","handleInputChange","event","target","value","handleFocus","handleBlur","className","children","fileName","_jsxFileName","lineNumber","columnNumber","handleSelectPlanet","name","_c","$RefreshReg$"],"sources":["/Users/christophernotley/my-webpack-react-app/src/components/Autocomplete/Autocomplete.jsx"],"sourcesContent":["import React, { useState, useRef, useCallback } from 'react';\nimport usePlanetSearch from '../../hooks/usePlanetSearch';\nimport AutocompleteInput from './AutocompleteInput';\nimport SuggestionList from './SuggestionList';\nimport './Autocomplete.css';\nimport { debounce } from '../../utils/debounce';\n\nconst Autocomplete = () => {\n  const [searchTerm, setSearchTerm] = useState('');\n  const [isFocused, setIsFocused] = useState(false);\n  const [selectedPlanet, setSelectedPlanet] = useState(null);\n  const inputRef = useRef(null);\n\n  // Create the debounced function using useCallback to ensure that it doesn't get recreated on every render\n  const debouncedSetSearchTerm = useCallback(\n    debounce((newSearchTerm) => {\n      setSearchTerm(newSearchTerm);\n    }, 500),\n    []\n  );\n\n  // Hook that uses the search term state to fetch data\n  const { planets, isLoading, isError } = usePlanetSearch(searchTerm);\n\n  if (planets && planets.length > 0) {\n    console.log('planets:', planets);\n  }\n\n  const handleInputChange = (event) => {\n    debouncedSetSearchTerm(event.target.value);\n    setSelectedPlanet(null);\n  };\n\n  const handleFocus = () => {\n    setIsFocused(true);\n  };\n\n  const handleBlur = () => {\n    setIsFocused(false);\n  };\n\nreturn (\n  <div className={`autocomplete-container ${isFocused ? 'focused' : ''}`}>\n    <AutocompleteInput\n      searchTerm={searchTerm}\n      handleInputChange={handleInputChange}\n      handleFocus={handleFocus}\n      handleBlur={handleBlur}\n      inputRef={inputRef}\n    />\n    {isFocused && (\n      <SuggestionList\n        isFocused={isFocused}\n        searchTerm={searchTerm}\n        planets={planets}\n        isLoading={isLoading}\n        isError={isError} // Make sure this is passed\n        handleSelectPlanet={setSelectedPlanet}\n      />\n    )}\n    {selectedPlanet && (\n      <div className=\"selected-planet\">\n        <p>Selected Planet: {selectedPlanet.name}</p>\n      </div>\n    )}\n  </div>\n);\n};\n\nexport default Autocomplete;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}