{"ast":null,"code":"import axios from 'axios';\nconst BASE_URL = 'https://swapi.dev/api';\n\n// Axios instance with predefined configurations\nconst axiosInstance = axios.create({\n  baseURL: BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n    // Add other common headers here if needed\n  }\n});\n\n// Fetch planets from the Star Wars API\nexport const fetchPlanets = async key => {\n  // Extract searchTerm from the key array\n  const searchTerm = key[1];\n  if (!searchTerm || searchTerm.length < 2) {\n    return []; // Early return if searchTerm is less than 2 characters or undefined\n  }\n  try {\n    const response = await axiosInstance.get(`/planets/?search=${searchTerm}`);\n    if (response.status !== 200 || !response.data || !Array.isArray(response.data.results)) {\n      throw new Error('Invalid API response');\n    }\n    return response.data.results;\n  } catch (error) {\n    console.error('Error fetching planets:', error);\n    throw error; // Rethrowing the error to be handled by SWR\n  }\n};","map":{"version":3,"names":["axios","BASE_URL","axiosInstance","create","baseURL","headers","fetchPlanets","key","searchTerm","length","response","get","status","data","Array","isArray","results","Error","error","console"],"sources":["/Users/christophernotley/my-webpack-react-app/src/api/starWarsApi.js"],"sourcesContent":["import axios from 'axios';\n\nconst BASE_URL = 'https://swapi.dev/api';\n\n// Axios instance with predefined configurations\nconst axiosInstance = axios.create({\n    baseURL: BASE_URL,\n    headers: {\n        'Content-Type': 'application/json',\n        // Add other common headers here if needed\n    },\n});\n\n// Fetch planets from the Star Wars API\nexport const fetchPlanets = async (key) => {\n    // Extract searchTerm from the key array\n    const searchTerm = key[1];\n\n    if (!searchTerm || searchTerm.length < 2) {\n        return []; // Early return if searchTerm is less than 2 characters or undefined\n    }\n\n    try {\n        const response = await axiosInstance.get(`/planets/?search=${searchTerm}`);\n        if (response.status !== 200 || !response.data || !Array.isArray(response.data.results)) {\n            throw new Error('Invalid API response');\n        }\n\n        return response.data.results;\n    } catch (error) {\n        console.error('Error fetching planets:', error);\n        throw error; // Rethrowing the error to be handled by SWR\n    }\n};"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,QAAQ,GAAG,uBAAuB;;AAExC;AACA,MAAMC,aAAa,GAAGF,KAAK,CAACG,MAAM,CAAC;EAC/BC,OAAO,EAAEH,QAAQ;EACjBI,OAAO,EAAE;IACL,cAAc,EAAE;IAChB;EACJ;AACJ,CAAC,CAAC;;AAEF;AACA,OAAO,MAAMC,YAAY,GAAG,MAAOC,GAAG,IAAK;EACvC;EACA,MAAMC,UAAU,GAAGD,GAAG,CAAC,CAAC,CAAC;EAEzB,IAAI,CAACC,UAAU,IAAIA,UAAU,CAACC,MAAM,GAAG,CAAC,EAAE;IACtC,OAAO,EAAE,CAAC,CAAC;EACf;EAEA,IAAI;IACA,MAAMC,QAAQ,GAAG,MAAMR,aAAa,CAACS,GAAG,CAAE,oBAAmBH,UAAW,EAAC,CAAC;IAC1E,IAAIE,QAAQ,CAACE,MAAM,KAAK,GAAG,IAAI,CAACF,QAAQ,CAACG,IAAI,IAAI,CAACC,KAAK,CAACC,OAAO,CAACL,QAAQ,CAACG,IAAI,CAACG,OAAO,CAAC,EAAE;MACpF,MAAM,IAAIC,KAAK,CAAC,sBAAsB,CAAC;IAC3C;IAEA,OAAOP,QAAQ,CAACG,IAAI,CAACG,OAAO;EAChC,CAAC,CAAC,OAAOE,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;IAC/C,MAAMA,KAAK,CAAC,CAAC;EACjB;AACJ,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}