{"ast":null,"code":"var _jsxFileName = \"/Users/christophernotley/my-webpack-react-app/src/components/Autocomplete/AutocompleteInput.jsx\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AutocompleteInput = ({\n  searchTerm,\n  handleInputChange,\n  handleFocus,\n  handleBlur,\n  inputRef,\n  selectedPlanet\n}) => {\n  // Use the selected planet name if it's available\n  const inputValue = selectedPlanet ? selectedPlanet : searchTerm;\n  return /*#__PURE__*/_jsxDEV(\"input\", {\n    type: \"text\",\n    placeholder: \"Search for a Star Wars planet\",\n    value: searchTerm,\n    onChange: handleInputChange,\n    onFocus: handleFocus,\n    onBlur: handleBlur,\n    ref: inputRef,\n    className: \"autocomplete-input\",\n    \"aria-label\": \"Search planets\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 5\n  }, this);\n};\n_c = AutocompleteInput;\nAutocompleteInput.propTypes = {\n  searchTerm: PropTypes.string.isRequired,\n  handleInputChange: PropTypes.func.isRequired,\n  handleFocus: PropTypes.func.isRequired,\n  handleBlur: PropTypes.func.isRequired,\n  inputRef: PropTypes.oneOfType([PropTypes.func, PropTypes.shape({\n    current: PropTypes.instanceOf(Element)\n  })]).isRequired\n};\nexport default AutocompleteInput;\nvar _c;\n$RefreshReg$(_c, \"AutocompleteInput\");","map":{"version":3,"names":["React","PropTypes","jsxDEV","_jsxDEV","AutocompleteInput","searchTerm","handleInputChange","handleFocus","handleBlur","inputRef","selectedPlanet","inputValue","type","placeholder","value","onChange","onFocus","onBlur","ref","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","propTypes","string","isRequired","func","oneOfType","shape","current","instanceOf","Element","$RefreshReg$"],"sources":["/Users/christophernotley/my-webpack-react-app/src/components/Autocomplete/AutocompleteInput.jsx"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst AutocompleteInput = ({ searchTerm, handleInputChange, handleFocus, handleBlur, inputRef, selectedPlanet }) => {\n  // Use the selected planet name if it's available\n  const inputValue = selectedPlanet ? selectedPlanet : searchTerm;\n\n  return (\n    <input\n      type=\"text\"\n      placeholder=\"Search for a Star Wars planet\"\n      value={searchTerm}\n      onChange={handleInputChange}\n      onFocus={handleFocus}\n      onBlur={handleBlur}\n      ref={inputRef}\n      className=\"autocomplete-input\"\n      aria-label=\"Search planets\"\n    />\n  );\n};\n\nAutocompleteInput.propTypes = {\n  searchTerm: PropTypes.string.isRequired,\n  handleInputChange: PropTypes.func.isRequired,\n  handleFocus: PropTypes.func.isRequired,\n  handleBlur: PropTypes.func.isRequired,\n  inputRef: PropTypes.oneOfType([\n    PropTypes.func, \n    PropTypes.shape({ current: PropTypes.instanceOf(Element) })\n  ]).isRequired\n};\n\nexport default AutocompleteInput;\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,SAAS,MAAM,YAAY;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnC,MAAMC,iBAAiB,GAAGA,CAAC;EAAEC,UAAU;EAAEC,iBAAiB;EAAEC,WAAW;EAAEC,UAAU;EAAEC,QAAQ;EAAEC;AAAe,CAAC,KAAK;EAClH;EACA,MAAMC,UAAU,GAAGD,cAAc,GAAGA,cAAc,GAAGL,UAAU;EAE/D,oBACEF,OAAA;IACES,IAAI,EAAC,MAAM;IACXC,WAAW,EAAC,+BAA+B;IAC3CC,KAAK,EAAET,UAAW;IAClBU,QAAQ,EAAET,iBAAkB;IAC5BU,OAAO,EAAET,WAAY;IACrBU,MAAM,EAAET,UAAW;IACnBU,GAAG,EAAET,QAAS;IACdU,SAAS,EAAC,oBAAoB;IAC9B,cAAW;EAAgB;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC5B,CAAC;AAEN,CAAC;AAACC,EAAA,GAjBIpB,iBAAiB;AAmBvBA,iBAAiB,CAACqB,SAAS,GAAG;EAC5BpB,UAAU,EAAEJ,SAAS,CAACyB,MAAM,CAACC,UAAU;EACvCrB,iBAAiB,EAAEL,SAAS,CAAC2B,IAAI,CAACD,UAAU;EAC5CpB,WAAW,EAAEN,SAAS,CAAC2B,IAAI,CAACD,UAAU;EACtCnB,UAAU,EAAEP,SAAS,CAAC2B,IAAI,CAACD,UAAU;EACrClB,QAAQ,EAAER,SAAS,CAAC4B,SAAS,CAAC,CAC5B5B,SAAS,CAAC2B,IAAI,EACd3B,SAAS,CAAC6B,KAAK,CAAC;IAAEC,OAAO,EAAE9B,SAAS,CAAC+B,UAAU,CAACC,OAAO;EAAE,CAAC,CAAC,CAC5D,CAAC,CAACN;AACL,CAAC;AAED,eAAevB,iBAAiB;AAAC,IAAAoB,EAAA;AAAAU,YAAA,CAAAV,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}